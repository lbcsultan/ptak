{"version":3,"sources":["./src/app/components/about/about.component.ts","./src/app/components/about/about.component.html","crypto (ignored)","./src/environments/environment.ts","./src/app/components/home/home.component.ts","./src/app/components/home/home.component.html","./src/app/components/profile/profile.component.html","./src/app/components/profile/profile.component.ts","./src/app/components/encrypt/encrypt.component.ts","./src/app/components/encrypt/encrypt.component.html","./src/app/components/list/list.component.html","./src/app/components/list/list.component.ts","./src/app/components/dashboard/dashboard.component.html","./src/app/components/dashboard/dashboard.component.ts","./src/app/app.component.ts","./src/app/app.component.html","./src/app/guards/auth.guard.ts","./src/app/components/login/login.component.ts","./src/app/components/login/login.component.html","./src/app/components/register/register.component.ts","./src/app/components/register/register.component.html","./src/app/app.module.ts","./src/app/components/mac/mac.component.ts","./src/app/components/mac/mac.component.html","./src/app/services/validate.service.ts","./src/app/components/navbar/navbar.component.html","./src/app/components/navbar/navbar.component.ts","./src/app/components/blog/blog.component.html","./src/app/components/blog/blog.component.ts","./src/app/services/auth.service.ts","./src/app/components/cert/cert.component.ts","./src/app/components/cert/cert.component.html","./src/app/app-routing.module.ts","./src/main.ts","./$_lazy_route_resource lazy namespace object"],"names":[],"mappings":"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","file":"main.js","sourcesContent":["import { Component, OnInit } from '@angular/core';\n\n@Component({\n  selector: 'app-about',\n  templateUrl: './about.component.html',\n  styleUrls: ['./about.component.scss']\n})\nexport class AboutComponent implements OnInit {\n\n  constructor() { }\n\n  ngOnInit() {\n  }\n\n}\n","<div>\n\n  <h2 class=\"page-header\">What is Paired Token? </h2>\n\n  <div class=\"alert alert-info\" role=\"alert\">\n    <h5>\n      Paired token (PT) is a new secondary credential scheme that provides stateless pre-shared key (PSK) in a client-server environment. The server issues a paired token (public token and secret token) to an authenticated client where the public token has the role of signed identity and the secret token is a kind of shared secret. Once a client is equipped with PT, it can be used for many symmetric key-based cryptographic applications such as authentication, authorization, key establishment, etc.\n    </h5>\n\n  </div>\n\n  <h2 class=\"page-header\">What is Paired Token Authentication? </h2>\n\n  <div class=\"alert alert-warning\" role=\"alert\">\n    <h5>\n      OAuth2.0 (and JWT) is the standard token authentication technology that is widely used in modern web services. OAuth 2.0 bearer token is widely used for stateless authentication in web environment, but it is vulnerable to eavesdropping attack. Thus, it should be used only in secure communication environment like https that it cannot\n      provide stateless authentication. OAuth 2.0 MAC token is designed to provide randomized authentication using message authentication code that it can be used in non-secure communication environment, but it cannot provide stateless authentication since server has to keep the track of all mac keys for every client. <br><br>\n\n      Paired-token authentication is newly developed token authentication technology that uses paired-token instead of single token. Server issues paired-token (public token and secret token) to logged in client (web browser). Then client can prove its authenticity instantly in time-dependent one-time way using the paired-token, and the server\n      can verify it stateless way without managing any user dependent information. <br><br>\n\n      This is a simplified model service that demonstrate the paired-token authentication.\n    </h5>\n\n  </div>\n\n\n  <h2 class=\"page-header\">Implementation Environment </h2>\n\n  <div class=\"alert alert-info\" role=\"alert\">\n    <b>MEAN Stack </b>\n    <p>\n      Web development using MongoDB/Express/Angular/Node.js\n    </p>\n\n    <b>Node.js/Express Backend </b>\n    <p>\n      Backend service using node.js and express\n    </p>\n\n    <b>Angular/Cli Frontend </b>\n    <p>\n      Easy web development using Angular front-end framework\n    </p>\n\n    <b>Ionic Framework </b>\n    <p>\n      Dual(iOS/Android) mode mobile app development using Ionic framework\n    </p>\n\n    <b>Heroku Deployment </b>\n    <p>\n      Heroku Cloud Service\n    </p>\n\n    <b>MongoDB Compass </b>\n    <p>\n      MongoDB as a Service\n    </p>\n  </div>\n\n  <h2 class=\"page-header\">Security Technologies</h2>\n\n  <div class=\"alert alert-warning\" role=\"alert\">\n    <b>Paired-Token Authentication </b>\n    <p>\n      Server issues paired-token(public token/secret token) to logged in users <br>\n      Keeping authenticated state using paired-token through plain communication channel <br>\n      High performance without https requirement <br>\n    </p>\n\n    <b>JWT Authentication </b>\n    <p>\n      Application example of JWT authentication <br>\n      It should be executed in https secure communication\n    </p>\n\n    <b>Issuing Certificate </b>\n    <p>\n      Server issues certificate to logged-in user\n    </p>\n\n    <b>Signature-based One-click Quick Login </b>\n    <p>\n      Implement one-click quick login using digital signature and certificate\n    </p>\n\n    <b>Secure ID/Pass Login </b>\n    <p>\n      Server delievers server certificate to client when root(home) page is connected. <br>\n      ID/Pass login information was encrypted with server certificate. <br>\n      Server sends dual-token to client in encrypted way\n    </p>\n\n    <b>Simple Encryption Channel using Paired Token </b>\n    <p>\n      Generate one-time key using paired-token and apply to message encryption\n    </p>\n\n    <b>Simple Message Authentication using Paired Token </b>\n    <p>\n      Generate one-time key using paired-token and apply to message authentication\n    </p>\n  </div>\n\n  <h2 class=\"page-header\">Details of Generation and Usage of Paired-Token </h2>\n\n  <div class=\"alert alert-info\" role=\"alert\">\n    <b>Issuing paired-token by server </b>\n    <p>\n      ptoken = JWT(userInfo, serverSecretKey) <br>\n      stoken = JWT(ptoken, serverSecretKey) <br>\n      Server sends [ptoken, stoken] to client <br>\n      Client saves [ptoken, stoken] in LocalStorage of the browser\n    </p>\n\n    <b>Generating one-time auth info by client </b>\n    <p>\n      Generate client current time (ctime) <br>\n      Compute auth = Hash(ctime, stoken) <br>\n      Client sends [ctime, ptoken, auth] to server\n    </p>\n\n    <b>Verification of client authentication by server </b>\n    <p>\n      Generate server current time (stime) <br>\n      Compute stoken from ptoken: stoken = JWT(ptoken, serverSecretKey) <br>\n      Compute auth' = Hash(ctime, stoken) <br>\n      Verification: (1) Check time difference, (2) Verification of ptoken, (3) Match auth=?auth'\n    </p>\n\n  </div>\n\n  <h2 class=\"page-header\">Notices </h2>\n\n  <div class=\"alert alert-warning\" role=\"alert\">\n    <b>When ID/pass login fails </b>\n    <p>\n      Reload Home page, which will deliever server certificate. <br>\n      ID/Pass login uses server certificate to protect login information from eavesdropping.\n    </p>\n\n    <b>When easy login fails </b>\n    <p>\n      You can utilize easy login only when the client browser is equipped with certificate. You need to get the\n      certificate first.\n    </p>\n  </div>\n\n  <h2 class=\"page-header\">Contact Info. </h2>\n\n  <div class=\"alert alert-info\" role=\"alert\">\n    <b>Professor Byoungcheon Lee </b>\n    <p>\n      - Department of Information Security, Joongbu University, Korea <br>\n      - Email: sultan @ joongbu . ac . kr <br>\n      - Homepage: <a href=\"http://cris.joongbu.ac.kr\"> http://cris.joongbu.ac.kr</a>\n\n    </p>\n\n  </div>\n","/* (ignored) */","// This file can be replaced during build by using the `fileReplacements` array.\n// `ng build --prod` replaces `environment.ts` with `environment.prod.ts`.\n// The list of file replacements can be found in `angular.json`.\n\nexport const environment = {\n  production: false\n};\n\n/*\n * For easier debugging in development mode, you can import the following file\n * to ignore zone related error stack frames such as `zone.run`, `zoneDelegate.invokeTask`.\n *\n * This import should be commented out in production mode because it will have a negative impact\n * on performance if an error is thrown.\n */\n// import 'zone.js/dist/zone-error';  // Included with Angular CLI.\n","import { Component, OnInit } from '@angular/core';\nimport { AuthService } from '../../services/auth.service';\nimport { Router } from '@angular/router';\nimport { FlashMessagesService } from 'angular2-flash-messages';\nimport * as forge from 'node-forge';\nconst pki = forge.pki;\n\n@Component({\n  selector: 'app-home',\n  templateUrl: './home.component.html',\n  styleUrls: ['./home.component.scss']\n})\nexport class HomeComponent implements OnInit {\n\n  currentTime: any;\n  nonceHex: any;\n  caCertPem: any;\n  signatureHex: any;\n  verified: any;\n  caCommon: any;\n  caOrganization: any;\n  caOU: any;\n\n  constructor(\n    private authService: AuthService,\n    private router: Router,\n    private flashMessage: FlashMessagesService\n  ) { }\n\n  ngOnInit() {\n    this.authService.connectHome().subscribe(data => {\n      this.currentTime = new Date(data.currentTime);  // Server current time\n      this.nonceHex = data.nonceHex;\n      this.caCertPem = data.caCertPem;\n      this.signatureHex = data.signatureHex;\n\n      let caCert = pki.certificateFromPem(data.caCertPem);\n      let caPublicKey = caCert.publicKey;\n      let signature = forge.util.hexToBytes(data.signatureHex);\n      let clientTime = new Date().getTime();          // Client current time\n      let diff = clientTime - data.currentTime;\n\n      let md = forge.md.sha1.create();\n      md.update(data.currentTime, 'utf8');\n      md.update(data.nonceHex, 'utf8');\n      let result = caPublicKey.verify(md.digest().bytes(), signature);\n      if (result == true && diff < 100000) {\n        this.verified = result;\n        localStorage.setItem('caCert', data.caCertPem);\n      }\n\n      this.caCommon = caCert.subject.getField('CN').value;\n      this.caOrganization = caCert.subject.getField('O').value;\n      this.caOU = caCert.subject.getField('OU').value;\n    })\n  }\n\n}\n","<div class=\"container\">\n  <div class=\"text-center alert-danger\">\n    <br>\n    <h1 class=\"display-4\">쌍토큰을 이용한 인증 </h1>\n    <h2 class=\"display-6\"> - Paired-Token Authentication -  </h2>\n    <br><br>\n    <a class=\"btn btn-primary\" routerLink='/register'> 사용자등록 </a>\n    &nbsp;&nbsp;\n    <a class=\"btn btn-success\" routerLink='/login'> 로그인 </a>\n    <br><br>\n  </div>\n\n\n  <hr>\n\n  <h4> 서버인증서  </h4>\n  <p>\n    클라이언트가 이 서비스의 루트페이지에 접속하면 서버는 서버인증서와 시간정보를 포함하는 서명값을 클라이언트에게 보냅니다. 클라이언트 브라우저는 서버의 서명을 검증하여 서버의 신분을 확인할 수 있습니다. 서버인증서는 브라우저의 LocalStorage에 저장하며 이것은 ID/Password 로그인정보를 암호화하는데 사용합니다. 그러므로 ID/Password는 공격자에게 노출되지 않고 안전하게 로그인할 수 있습니다.\n  </p>\n  <div class=\"alert alert-info\">\n\n    <p>\n      이름(Common Name): {{caCommon}}  <br>\n      기관(Organization): {{caOrganization}} <br>\n      부서(Org Unit): {{caOU}}\n    </p>\n    <label class=\"form-label\"> 서버인증서(Server certificate) - LocalStorage에 저장됨 </label>\n    <textarea class=\"form-control\" rows=\"8\">{{caCertPem}} </textarea>\n  </div>\n  <hr>\n\n  <h4> 서버가 보내온 일회성 서명(one-time signature) </h4>\n  <div class=\"alert alert-success\">\n    <p>\n      Current Time: {{currentTime}} <br>\n      Nonce: {{nonceHex}}\n    </p>\n    <label class=\"form-label\">One-time signature:</label>\n    <textarea class=\"form-control\" rows=\"5\">{{signatureHex}} </textarea>\n  </div>\n  <hr>\n  <h3 class=\"alert-danger\"> 서명 검증: {{verified}} - 서명 검증 성공! </h3>\n  <br>\n</div>\n","<div *ngIf=\"name\">\n  <h2 class=\"page-header\"> 쌍토큰 인증 (Paired Token Authentication) </h2>\n  <div class=\"alert\" role=\"alert\">\n    <p>\n      이 페이지는 쌍토큰을 이용한 안전한 인증방식을 보여주기 위한 페이지입니다. 클라이언트는 서버에게 다음의 세가지 정보를 전송합니다. <br>\n      1. 클라이언트가 누구인지를 나타내는 공개토큰 <br>\n      2. 접속을 요청하는 현재시간  <br>\n      3. 일회용인증정보 (이것은 비밀토큰, 현재시간을 이용하여 계산한 해시값)\n    </p>\n    <p>\n      서버는 클라이언트로부터 수신한 정보로부터 다음을 검증합니다. <br>\n      1. 공개토큰이 유효한지 검사. <br>\n      2. 접속요청시간이 서버의 시간과 비슷한 현재시간인지 검사. 시간차이가 크면 에러로 판정합니다. <br>\n      3. 서버는 공개토큰으로부터 비밀토큰을 계산합니다. 그리고 일회용인증정보가 유효한지 검사합니다.  <br>\n      위 3가지 검사가 모두 유효한 경우에만 서비스를 제공하며, 유효하지 않은 경우 세션을 종료하고 다시 로그인 페이지로 이동합니다.\n    </p>\n  </div>\n\n  <div class=\"alert alert-success\" role=\"alert\">\n    <h2 class=\"page-header\"> 이 페이지에 접속하기 위해 서버로 전송하는 정보 </h2>\n    <p>공개토큰(Public Token):\n      <textarea class=\"form-control\" rows=\"6\"> {{ptoken}}</textarea>\n    </p>\n    <p>현재시간(Current Time): {{ctime}}</p>\n    <p>일회용인증정보(One-time Auth): {{auth}}</p>\n    <p>\n      일회용인증정보는 현재시간에 따라 계속 바뀌게 됩니다. 공격자는 도청한 인증정보를 재사용할 수 없습니다.\n    </p>\n  </div>\n\n  <br>\n  <h2 class=\"page-header\"> 서버가 응답하여 전송한 정보  </h2>\n  <p>\n    서버는 위의 인증이 유효한 경우에만 다음의 사용자 정보를 응답합니다.\n  </p>\n  <ul class=\"list-group\">\n    <li class=\"list-group-item\">Name: {{name}}</li>\n    <li class=\"list-group-item\">Username: {{username}}</li>\n    <li class=\"list-group-item\">Email: {{email}}</li>\n    <li class=\"list-group-item\">Age: {{age}}</li>\n  </ul>\n</div>\n","import { Component, OnInit } from '@angular/core';\nimport { AuthService } from '../../services/auth.service';\nimport { Router } from '@angular/router';\n\n@Component({\n  selector: 'app-profile',\n  templateUrl: './profile.component.html',\n  styleUrls: ['./profile.component.scss']\n})\nexport class ProfileComponent implements OnInit {\n  name: string;\n  username: string;\n  email: string;\n  age: number;\n  ptoken: any;  // Public token\n  stoken: any;  // Secret token\n  ctime: any;   // Client current time\n  auth: any;    // One-time auth info\n\n  constructor(\n    private authService: AuthService,\n    private router: Router\n  ) { }\n\n  ngOnInit() {\n    this.ctime = new Date().getTime().toString();\n    this.ptoken = localStorage.getItem('ptoken');\n    this.stoken = localStorage.getItem('stoken');\n    this.auth = this.authService.computeAuth(this.ctime, this.stoken);\n\n    this.authService.getProfile(this.ptoken, this.ctime, this.auth).subscribe(profile => {\n      this.name = profile.userNoPW.name;\n      this.username = profile.userNoPW.username;\n      this.email = profile.userNoPW.email;\n      this.age = profile.userNoPW.age;\n    }, err => {\n      console.log(err);\n      this.authService.logout();\n      this.router.navigate(['login']);\n      return false;\n    });\n  }\n}\n","import { Component, OnInit } from '@angular/core';\nimport { AuthService } from 'src/app/services/auth.service';\nimport { FlashMessagesService } from 'angular2-flash-messages';\n\nimport * as forge from 'node-forge';\n\n@Component({\n  selector: 'app-encrypt',\n  templateUrl: './encrypt.component.html',\n  styleUrls: ['./encrypt.component.scss']\n})\nexport class EncryptComponent implements OnInit {\n\n  plaintext: string;  // User input\n  ctime: any;         // Client current time\n  ptoken: any;        // Public token\n  stoken: any;        // Secret token\n  key: any;           // Generated one-time secret key\n  encrypted: any;     // Ciphertext\n  decrypted: any;     // Deciphered plaintext\n\n  constructor(\n    private authService: AuthService,\n    private flashMessage: FlashMessagesService\n  ) { }\n\n  ngOnInit() {\n  }\n\n  onEncryptSubmit() {\n    this.ctime = new Date().getTime().toString();\n    this.ptoken = localStorage.getItem('ptoken');\n    this.stoken = localStorage.getItem('stoken');\n    this.key = this.authService.getKey(this.ctime, this.stoken);\n    this.encrypted = this.authService.getEncrypt(this.plaintext, this.key);\n\n    this.authService.encryptedMessage(this.encrypted, this.ctime, this.ptoken).subscribe(data => {\n      if (data.decrypted) {\n        this.decrypted = forge.util.decodeUtf8(data.decrypted.data);\n      }\n    });\n  }\n\n}\n","<h2 class=\"page-header\"> 메시지 암호화 (Message Encryption) </h2>\n<div class=\"alert\" role=\"alert\">\n  <p>\n    이 페이지는 클라이언트와 서버가 공유하게 되는 일회용 비밀키를 이용하여 암호화된 메시지를 전송하는 사례를 보여줍니다. 서버는 동일한 일회용 비밀키를 이용하여 복호화할 수 있고 그 결과를 응답합니다. 동일한 메시지를 전송하는 경우 현재시간에 따라 일회용 비밀키와 암호문이 계속 바뀌는 것을 볼 수 있습니다.\n  </p>\n</div>\n<hr>\n<form (ngSubmit)=\"onEncryptSubmit()\">\n  <div class=\"mb-3\">\n    <label class=\"form-label\"> 암호화 전송할 메시지를 입력하세요...</label>\n    <textarea class=\"form-control\" rows=\"5\" [(ngModel)]=\"plaintext\" name=\"plaintext\"></textarea>\n  </div>\n  <input type=\"submit\" class=\"btn btn-primary\" value=\"암호화 메시지 전송\">\n</form>\n<hr>\n\n<div class=\"alert alert-info\" role=\"alert\">\n  <h4>생성된 일회용 비밀키 </h4>\n  <p>{{key}}</p>\n</div>\n\n<div class=\"alert alert-warning\" role=\"alert\">\n  <h4> 서버에게 전송하는 정보</h4>\n  <p> - 공개토큰(Public Token):\n    <textarea class=\"form-control\" rows=\"5\"> {{ptoken}}</textarea>\n  </p>\n  <p> - 현재시간(Current Time): {{ctime}}  </p>\n  <p> - 암호문(Ciphertext):\n    <textarea class=\"form-control\" rows=\"5\"> {{encrypted}}</textarea>\n  </p>\n</div>\n\n<div class=\"alert alert-success\" role=\"alert\">\n  <h4> 서버가 복호화하여 응답한 정보 </h4>\n  <textarea class=\"form-control\" rows=\"5\"> {{decrypted}}</textarea>\n</div>\n","<h2 class=\"page-header\"> 서비스 사용자 리스트  </h2>\n<div class=\"alert\" role=\"alert\">\n  <p>\n    이 서비스에 등록된 사용자 리스트를 테이블로 보여줍니다.\n  </p>\n</div>\n<table class=\"table table-striped\">\n  <thead class=\"table-dark\">\n    <tr>\n      <th>Name</th>\n      <th>ID</th>\n      <th>Email</th>\n      <th>Age</th>\n    </tr>\n  </thead>\n  <tbody>\n    <tr *ngFor=\"let user of users\">\n      <td>{{user.name}}</td>\n      <td>{{user.username}}</td>\n      <td>{{user.email}}</td>\n      <td>{{user.age}}</td>\n    </tr>\n  </tbody>\n</table>\n","import { Component, OnInit } from '@angular/core';\nimport { AuthService } from 'src/app/services/auth.service';\n\n@Component({\n  selector: 'app-list',\n  templateUrl: './list.component.html',\n  styleUrls: ['./list.component.scss']\n})\nexport class ListComponent implements OnInit {\n  constructor(private authService: AuthService) { }\n  users: any;\n  ngOnInit() {\n    this.authService.getList().subscribe(users => {\n      this.users = users;\n    });\n  }\n}\n","<div *ngIf=\"name\">\n  <h2 class=\"page-header\"> 대시보드 (Dashboard)</h2>\n  <div class=\"alert\" role=\"alert\">\n  <p>\n    대시보드는 로그인된 사용자 정보를 보여주는 페이지입니다. <br>\n    로그인에 성공하면 서버는 사용자정보(UserInfo)와 함께 쌍토큰(공개토큰, 비밀토큰)을 발급하며 클라이언트는 이 정보들을 로컬스토리지에 저장하여 사용합니다.  <br>\n    클라이언트가 서버로부터 인증서를 발급받았다면 인증서 정보도 함께 보여줍니다.\n    서버인증서는 이 홈페이지를 접속하는 모든 클라이언트에게 자동적으로 배포되는 정보입니다.\n  </p>\n</div>\n  <hr>\n\n  <form>\n    <div class=\"form-group\">\n      <label class=\"form-label\"> 사용자정보 (UserInfo) </label>\n      <textarea class=\"form-control\" rows=\"1\" disabled>{{userString}}</textarea>\n    </div>\n    <hr>\n    <div class=\"mb-3\">\n      <label class=\"form-label\"> 공개토큰 (Public Token) </label>\n      <textarea class=\"form-control\" rows=\"8\" disabled>{{ptoken}}</textarea>\n    </div>\n    <div class=\"mb-3\">\n      <label class=\"form-label\"> 비밀토큰 (Secret Token) </label>\n      <textarea class=\"form-control\" rows=\"8\" disabled>{{stoken}}</textarea>\n    </div>\n    <hr>\n    <div class=\"mb-3\">\n      <label class=\"form-label\"> 사용자인증서 (User certificate) </label>\n      <textarea class=\"form-control\" rows=\"8\" disabled>{{certPem}}</textarea>\n    </div>\n    <div class=\"mb-3\">\n      <label class=\"form-label\"> 서버인증서 (Server certificate) </label>\n      <textarea class=\"form-control\" rows=\"8\" disabled>{{caCertPem}}</textarea>\n    </div>\n  </form>\n</div>\n","import { Component, OnInit } from '@angular/core';\n\n@Component({\n  selector: 'app-dashboard',\n  templateUrl: './dashboard.component.html',\n  styleUrls: ['./dashboard.component.scss']\n})\nexport class DashboardComponent implements OnInit {\n  userString: string;\n  name: string;\n  ptoken: string;\n  stoken: string;\n  certPem: string;\n  caCertPem: string;\n\n  constructor() { }\n\n  ngOnInit() {\n    this.userString = localStorage.getItem('userNoPW');\n    this.name = JSON.parse(this.userString).name;\n    this.ptoken = localStorage.getItem('ptoken');\n    this.stoken = localStorage.getItem('stoken');\n    this.certPem = localStorage.getItem('cert');\n    this.caCertPem = localStorage.getItem('caCert');\n  }\n\n}\n","import { Component } from '@angular/core';\nimport { HttpClient } from \"@angular/common/http\";\n\n@Component({\n  selector: 'app-root',\n  templateUrl: './app.component.html',\n  styleUrls: ['./app.component.scss']\n})\nexport class AppComponent {\n  constructor(public http: HttpClient) { }\n  title = 'angular-src';\n}\n","<app-navbar></app-navbar>\n\n<div class=\"container main\">\n  <flash-messages></flash-messages>\n  <router-outlet></router-outlet>\n</div>\n","import { Injectable } from '@angular/core';\r\nimport { Router, CanActivate } from '@angular/router';\r\nimport { AuthService } from '../services/auth.service';\r\n\r\n@Injectable()\r\nexport class AuthGuard implements CanActivate {\r\n  constructor(private authService: AuthService, private router: Router) {\r\n  }\r\n\r\n  canActivate() {\r\n    if (this.authService.loggedIn()) {\r\n      return true;\r\n    } else {\r\n      this.router.navigate(['/login']);\r\n      return false;\r\n    }\r\n  }\r\n}\r\n","import { Component, OnInit } from '@angular/core';\nimport { AuthService } from '../../services/auth.service';\nimport { Router } from '@angular/router';\nimport { FlashMessagesService } from 'angular2-flash-messages';\nimport { UserNoPW } from 'src/app/models/User';\nimport * as forge from 'node-forge';\nconst pki = forge.pki;\n\n@Component({\n  selector: 'app-login',\n  templateUrl: './login.component.html',\n  styleUrls: ['./login.component.scss']\n})\nexport class LoginComponent implements OnInit {\n  username: string;\n  password: string;\n  userNoPW: UserNoPW;\n\n  constructor(\n    private authService: AuthService,\n    private router: Router,\n    private flashMessage: FlashMessagesService\n  ) { }\n\n  ngOnInit() {\n  }\n\n  // ID/Pass login\n  onLoginSubmit() {\n    // Get ca certificate\n    let caCertPem = localStorage.getItem('caCert');\n    let caCert = pki.certificateFromPem(caCertPem);\n    let caPublicKey = caCert.publicKey;\n\n    // Build up LoginInfo\n    const loginInfo = {\n      username: this.username,\n      password: this.password\n    }\n    let loginInfoJson = JSON.stringify(loginInfo);\n\n    // Encrypt LoginInfo with CA's public key\n    let key = forge.random.getBytesSync(16); // Random Session Key for AES encryption\n    let cipher = forge.cipher.createCipher('AES-ECB', key);\n    cipher.start();\n    cipher.update(forge.util.createBuffer(loginInfoJson, 'binary'));\n    cipher.finish();\n    let ciphertext = cipher.output;  // Encrypted userInfo\n    let ciphertextHex = forge.util.bytesToHex(ciphertext);\n    let encryptedKey = caPublicKey.encrypt(key, 'RSA-OAEP');  // Encrypted session key with server's public key\n    let encryptedKeyHex = forge.util.bytesToHex(encryptedKey);\n\n    // Encrypted LoginInfo.\n    const loginInfoEnc = {\n      ciphertextHex: ciphertextHex, // Encrypted userInfo\n      encryptedKeyHex: encryptedKeyHex // Encrypted session key with server's public key\n    }\n\n    this.authService.authenticateUser(loginInfoEnc).subscribe(data => {\n      if (data.success) {\n\n        // Recover UserInfo\n        let ciphertextToHex = data.ciphertextToHex;\n        let ciphertext = forge.util.hexToBytes(ciphertextToHex);\n        let decipher = forge.cipher.createDecipher('AES-ECB', key);\n        decipher.start();\n        decipher.update(forge.util.createBuffer(ciphertext, 'binary'));\n        decipher.finish();\n        let recovered = decipher.output;\n        let recoveredParse = JSON.parse(recovered);\n        let ptoken = recoveredParse.ptoken;\n        let stoken = recoveredParse.stoken;\n        let userNoPW = recoveredParse.userNoPW;\n\n        this.userNoPW = userNoPW;\n\n        // Store Token and User Info\n        this.authService.storeUserData(ptoken, stoken, userNoPW);\n        this.flashMessage.show('You are now logged in', {\n          cssClass: 'alert-success',\n          timeout: 5000\n        });\n        this.router.navigate(['dashboard']);  //Logged in and Redirect to dashboard\n      } else {\n        this.flashMessage.show(data.msg, {\n          cssClass: 'alert-danger',\n          timeout: 5000\n        });\n        this.router.navigate(['login']);  // Login failed and redirect to Login page\n      }\n    });\n  }\n\n  // One-click easy login using digital signature\n  onLoginSigSubmit() {\n    this.authService.authenticateSigUser().subscribe(data => {\n      if (data.success) {\n        this.authService.storeUserData(data.ptoken, data.stoken, data.userNoPW);\n        this.flashMessage.show('Easy login successful', { cssClass: 'alert-success', timeout: 5000 });\n        this.router.navigate(['dashboard']);\n      } else {\n        this.flashMessage.show(data.msg, { cssClass: 'alert-danger', timeout: 5000 });\n        this.router.navigate(['login']);\n      }\n    });\n  }\n}\n","<h2 class=\"page-header\">로그인(Login) </h2>\n<br>\n<p>\n  ID/Pass의 로그인 정보는 서버의 인증서로 암호화되어 안전하게 전달됩니다. 그러므로 브라우저는 서버의 인증서를 가지고 있어야 합니다. 혹시 로그인이 잘 되지 않는 경우에는 Home 메뉴를 클릭하여 서버인증서를 다시 한번 받아오고 난 후 로그인을 다시한번 시도해 보세요.\n</p>\n<p>\n  원클릭 로그인(One-click quick login)은 서버가 브라우저에게 발급한 인증서를 이용한 일회용 서명값을 전송하여 로그인하는 방식으로 사용자는 아무런 정보를 입력할 필요가 없는 편리한 로그인 방식입니다. 이 기능을 이용하기 위해서는 로그인 성공 후 인증서발급 메뉴에서 인증서를 발급받아야 합니다.\n</p>\n<div class=\"row\">\n  <div class=\"col-md-6\">\n    <div class=\"alert alert-warning\">\n      <h3 class=\"page-header\">ID/Pass Login </h3>\n\n      <form (ngSubmit)=\"onLoginSubmit()\">\n        <div class=\"mb-3\">\n          <label class=\"form-label\">ID</label>\n          <input type=\"text\" class=\"form-control\" name=\"username\" [(ngModel)]=\"username\">\n        </div>\n        <div class=\"mb-3\">\n          <label class=\"form-label\">Password</label>\n          <input type=\"password\" class=\"form-control\" name=\"password\" [(ngModel)]=\"password\">\n        </div>\n        <input type=\"submit\" class=\"btn btn-primary\" value=\"Login\">\n        <br>\n      </form>\n      <br>\n    </div>\n  </div>\n  <div class=\"col-md-6\">\n    <div class=\"alert alert-info\">\n      <h3 class=\"page-header\"> 원클릭 로그인 </h3>\n      <br>\n      <form (ngSubmit)=\"onLoginSigSubmit()\">\n        <input type=\"submit\" class=\"btn btn-secondary\" value=\"원클릭 로그인\">\n      </form>\n      <br>\n    </div>\n  </div>\n</div>\n","import { Component, OnInit } from '@angular/core';\nimport { ValidateService } from '../../services/validate.service';\nimport { AuthService } from '../../services/auth.service';\nimport { FlashMessagesService } from 'angular2-flash-messages';\nimport { Router } from '@angular/router';\nimport * as forge from 'node-forge';\n\nconst pki = forge.pki;\n\n@Component({\n  selector: 'app-register',\n  templateUrl: './register.component.html',\n  styleUrls: ['./register.component.scss']\n})\nexport class RegisterComponent implements OnInit {\n\n  name: string;\n  email: string;\n  username: string;\n  password1: string;\n  password2: string;\n  password: string;\n  age: number;\n\n  constructor(\n    private validateService: ValidateService,\n    private flashMessage: FlashMessagesService,\n    private authService: AuthService,\n    private router: Router\n  ) { }\n\n  ngOnInit() {\n  }\n\n  onRegisterSubmit() {\n\n    // Get Server certificate\n    const caCertPem = localStorage.getItem('caCert');\n    const caCert = pki.certificateFromPem(caCertPem);\n    const caPublicKey = caCert.publicKey;\n\n    // Check two password inputs\n    if (this.password1 !== this.password2) {\n      this.flashMessage.show('Two password inputs are not equal', { cssClass: 'alert-danger', timeout: 3000 });\n      return false;\n    }\n\n    // Generate new user info\n    const userInfo = {\n      name: this.name,\n      email: this.email,\n      username: this.username,\n      password: this.password1,\n      age: this.age\n    };\n\n    const userInfoJson = JSON.stringify(userInfo);\n\n    // Check all input fields\n    if (!this.validateService.validateRegister(userInfo)) {\n      this.flashMessage.show('Fill out all required fields!', { cssClass: 'alert-danger', timeout: 3000 });\n      return false;\n    }\n\n    // Validate email address\n    if (!this.validateService.validateEmail(userInfo.email)) {\n      this.flashMessage.show('Use correct email address!', { cssClass: 'alert-danger', timeout: 3000 });\n      return false;\n    }\n\n    // Encrypt Login Info with Server's public key\n    let key = forge.random.getBytesSync(16); // Random Session Key for AES encryption\n    let cipher = forge.cipher.createCipher('AES-ECB', key);\n    cipher.start();\n    cipher.update(forge.util.createBuffer(userInfoJson, 'binary'));\n    cipher.finish();\n    let ciphertext = cipher.output;  // Encrypted userInfo\n    let ciphertextHex = forge.util.bytesToHex(ciphertext);\n    let encryptedKey = caPublicKey.encrypt(key, 'RSA-OAEP');  // PublicKey-encrypted session key\n    let encryptedKeyHex = forge.util.bytesToHex(encryptedKey);\n\n    // Encrypted Login Info\n    const register = {\n      ciphertextHex: ciphertextHex,\n      encryptedKeyHex: encryptedKeyHex\n    }\n\n    // Register New User\n    this.authService.registerUser(register).subscribe(data => {\n      if (data.success) {\n        this.flashMessage.show(data.msg, { cssClass: 'alert-success', timeout: 3000 });\n        this.router.navigate(['/login']);\n      } else {\n        this.flashMessage.show(data.msg, { cssClass: 'alert-danger', timeout: 3000 });\n        this.router.navigate(['/register']);\n      }\n    });\n\n  }\n}\n","<h2 class=\"page-header\">사용자등록(Register)</h2>\n<br>\n<form (ngSubmit)=\"onRegisterSubmit()\">\n  <div class=\"mb-3\">\n    <label class=\"form-label\"> 이름(Name) </label>\n    <input type=\"text\" [(ngModel)]=\"name\" name=\"name\" class=\"form-control\">\n  </div>\n  <div class=\"mb-3\">\n    <label class=\"form-label\"> 이메일주소(Email) </label>\n    <input type=\"text\" [(ngModel)]=\"email\" name=\"email\" class=\"form-control\">\n  </div>\n  <div class=\"mb-3\">\n    <label class=\"form-label\"> 나이(Age) </label>\n    <input type=\"text\" [(ngModel)]=\"age\" name=\"age\" class=\"form-control\">\n  </div>\n  <div class=\"mb-3\">\n    <label class=\"form-label\"> 아이디(ID) </label>\n    <input type=\"text\" [(ngModel)]=\"username\" name=\"username\" class=\"form-control\">\n  </div>\n  <div class=\"mb-3\">\n    <label class=\"form-label\"> 패스워드 </label>\n    <input type=\"password\" [(ngModel)]=\"password1\" name=\"password1\" class=\"form-control\">\n  </div>\n  <div class=\"mb-3\">\n    <label class=\"form-label\"> 패스워드 확인 </label>\n    <input type=\"password\" [(ngModel)]=\"password2\" name=\"password2\" class=\"form-control\">\n  </div>\n  <input type=\"submit\" class=\"btn btn-primary\" value=\"등록하기\">\n</form>\n","import { BrowserModule } from '@angular/platform-browser';\nimport { NgModule } from '@angular/core';\nimport { FormsModule } from '@angular/forms';\nimport { HttpClientModule } from '@angular/common/http';\n\nimport { AppRoutingModule } from './app-routing.module';\nimport { AppComponent } from './app.component';\nimport { NavbarComponent } from './components/navbar/navbar.component';\nimport { LoginComponent } from './components/login/login.component';\nimport { RegisterComponent } from './components/register/register.component';\nimport { HomeComponent } from './components/home/home.component';\nimport { DashboardComponent } from './components/dashboard/dashboard.component';\nimport { ProfileComponent } from './components/profile/profile.component';\nimport { ListComponent } from './components/list/list.component';\n\nimport { ValidateService } from './services/validate.service';\nimport { AuthService } from './services/auth.service';\nimport { FlashMessagesModule } from 'angular2-flash-messages';\nimport { FlashMessagesService } from 'angular2-flash-messages';\nimport { AuthGuard } from './guards/auth.guard';\n\nimport { JwtModule } from '@auth0/angular-jwt';\nimport { EncryptComponent } from './components/encrypt/encrypt.component';\nimport { MacComponent } from './components/mac/mac.component';\nimport { BlogComponent } from './components/blog/blog.component';\nimport { AboutComponent } from './components/about/about.component';\nimport { CertComponent } from './components/cert/cert.component';\n\n@NgModule({\n  declarations: [\n    AppComponent,\n    NavbarComponent,\n    LoginComponent,\n    RegisterComponent,\n    HomeComponent,\n    DashboardComponent,\n    ProfileComponent,\n    ListComponent,\n    EncryptComponent,\n    MacComponent,\n    BlogComponent,\n    AboutComponent,\n    CertComponent\n  ],\n  imports: [\n    BrowserModule,\n    FormsModule,\n    AppRoutingModule,\n    HttpClientModule,\n    FlashMessagesModule,\n    JwtModule.forRoot({\n      config: {\n        tokenGetter: () => {\n          return localStorage.getItem('id_token');\n        }\n      }\n    })\n  ],\n  providers: [ValidateService, AuthService, FlashMessagesService, AuthGuard],\n  bootstrap: [AppComponent]\n})\nexport class AppModule { }\n","import { Component, OnInit } from '@angular/core';\nimport { AuthService } from 'src/app/services/auth.service';\nimport { FlashMessagesService } from 'angular2-flash-messages';\nimport * as forge from 'node-forge';\n\n@Component({\n  selector: 'app-mac',\n  templateUrl: './mac.component.html',\n  styleUrls: ['./mac.component.scss']\n})\nexport class MacComponent implements OnInit {\n\n  plaintext: string;    // User input plaintext\n  ctime: any;           // Client current time\n  ptoken: any;          // Public token\n  stoken: any;          // Secret token\n  mac: any;             // Mac value\n  key: any;             // One-time secret key\n  msg: string;          // Server reply message\n\n  constructor(\n    private authService: AuthService,\n    private flashMessage: FlashMessagesService\n  ) { }\n\n  ngOnInit() {\n  }\n\n  onMacSubmit() {\n    this.ctime = new Date().getTime().toString();\n    this.ptoken = localStorage.getItem('ptoken');\n    this.stoken = localStorage.getItem('stoken');\n    this.key = this.authService.getKey(this.ctime, this.stoken);\n    const plaintextUtf8 = forge.util.encodeUtf8(this.plaintext);\n    this.mac = this.authService.getMac(plaintextUtf8, this.key);\n\n    this.authService.macMessage(plaintextUtf8, this.ctime, this.ptoken, this.mac).subscribe(data => {\n      console.log(data);\n      this.msg = data.msg;\n    });\n  }\n\n}\n","<h2 class=\"page-header\"> 메시지인증 (Message Authentication) </h2>\n<div class=\"alert\" role=\"alert\">\n  <p>\n    이 페이지는 클라이언트가 서버에 전송하는 정보가 변조되지 않았음을 증명하는 메시지인증 기능을 보여줍니다. 클라이언트는 비밀토큰과 현재시간을 이용하여 일회용비밀키를 계산하고 이것을 이용하여 메시지에 대한 HMAC 값을 계산하여 일회용인증정보로 메시지와 함께 보냅니다. 서버는 동일한 일회용비밀키를 계산할 수 있기 때문에 전송된 메시지의 유효성을 검증할 수 있습니다. 공격자는 비밀토큰 값을 알 수 없기 때문에 일회용비밀키를 계산할 수 없고 메시지를 변조할 수 없습니다. 동일한 메시지를 여러번 전송해보면 현재시간이 달라짐에 따라 일회용인증정보가 계속 바뀌는 것을 볼 수 있습니다.\n  </p>\n</div>\n<hr>\n<form (ngSubmit)=\"onMacSubmit()\">\n  <div class=\"mb-3\">\n    <label class=\"form-label\"> 전송할 메시지를 입력하세요...</label>\n    <textarea class=\"form-control\" rows=\"3\" [(ngModel)]=\"plaintext\" name=\"plaintext\"></textarea>\n  </div>\n  <input type=\"submit\" class=\"btn btn-primary\" value=\"메시지전송\">\n</form>\n<hr>\n\n<div class=\"alert alert-info\" role=\"alert\">\n  <h4>생성된 일회용비밀키.  </h4>\n  <p>{{key}}</p>\n  <p>이 일회용비밀키는 MAC값을 계산하는데만 사용하고 실제로 서버에 전송하지는 않습니다. </p>\n</div>\n\n<div class=\"alert alert-warning\" role=\"alert\">\n  <h4>서버에 전송되는 정보 </h4>\n  <p> - 공개토큰(Public Token):\n    <textarea class=\"form-control\" rows=\"5\"> {{ptoken}}</textarea>\n  </p>\n  <p> - 현재시간(Current Time): {{ctime}} </p>\n  <p> - 메시지(Message):\n    <textarea class=\"form-control\" rows=\"3\"> {{plaintext}}</textarea>\n  </p>\n  <p> - 메시지인증값(MAC): {{mac}} </p>\n</div>\n\n<div class=\"alert alert-success\" role=\"alert\">\n  <h4> 서버의 응답 </h4>\n  <p> {{msg}} </p>\n</div>\n","import { Injectable } from '@angular/core';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class ValidateService {\n\n  constructor() { }\n\n  validateRegister(user) {\n    if (user.name == undefined || user.email == undefined || user.username == undefined || user.password == undefined) {\n      return false;\n    } else {\n      return true;\n    }\n  }\n\n  validateEmail(email) {\n    var re = /^(([^<>()[\\]\\\\.,;:\\s@\\\"]+(\\.[^<>()[\\]\\\\.,;:\\s@\\\"]+)*)|(\\\".+\\\"))@((\\[[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\.[0-9]{1,3}\\])|(([a-zA-Z\\-0-9]+\\.)+[a-zA-Z]{2,}))$/;\n    return re.test(email);\n  }\n\n}\n","<nav class=\"navbar navbar-expand-lg navbar-dark bg-dark\">\n  <div class=\"container\">\n    <a class=\"navbar-brand\" routerLink='/'>쌍토큰인증</a>\n    <button class=\"navbar-toggler\" type=\"button\" data-bs-toggle=\"collapse\" data-bs-target=\"#navbarSupportedContent\" aria-controls=\"navbarSupportedContent\" aria-expanded=\"false\" aria-label=\"Toggle navigation\">\n      <span class=\"navbar-toggler-icon\"></span>\n    </button>\n    <div class=\"collapse navbar-collapse\" id=\"navbarSupportedContent\">\n      <ul class=\"navbar-nav me-auto mb-2 mb-lg-0\">\n\n        <li class=\"nav-item\">\n          <a class=\"nav-link active\" aria-current=\"page\" routerLink='/'>홈으로</a>\n        </li>\n        <li class=\"nav-item\">\n          <a class=\"nav-link\" aria-current=\"page\" routerLink='/about'>기술소개</a>\n        </li>\n        <li *ngIf=\"checkLoggedIn()\" class=\"nav-item\" aria-current=\"page\" >\n          <a class=\"nav-link\" routerLink='/dashboard'> 대시보드 </a>\n        </li>\n        <li *ngIf=\"checkLoggedIn()\" class=\"nav-item\" aria-current=\"page\" >\n          <a class=\"nav-link\" routerLink='/blog'> JWT인증 </a>\n        </li>\n        <li *ngIf=\"checkLoggedIn()\" class=\"nav-item\" aria-current=\"page\" >\n          <a class=\"nav-link\" routerLink='/profile'>PTA인증 </a>\n        </li>\n        <li *ngIf=\"checkLoggedIn()\" class=\"nav-item\" aria-current=\"page\" >\n          <a class=\"nav-link\" routerLink='/encrypt'> 암호화 </a>\n        </li>\n        <li *ngIf=\"checkLoggedIn()\" class=\"nav-item\" aria-current=\"page\" >\n          <a class=\"nav-link\" routerLink='/mac'> 메시지인증 </a>\n        </li>\n        <li *ngIf=\"checkLoggedIn()\" class=\"nav-item\" aria-current=\"page\" >\n          <a class=\"nav-link\" routerLink='/cert'> 인증서발급 </a>\n        </li>\n        <li *ngIf=\"checkLoggedIn()\" class=\"nav-item\" aria-current=\"page\" >\n          <a class=\"nav-link\" routerLink='/list'>사용자리스트</a>\n        </li>\n      </ul>\n\n      <ul class=\"navbar-nav ml-auto\">\n        <li *ngIf=\"!checkLoggedIn()\" class=\"nav-item\" aria-current=\"page\">\n          <a class=\"nav-link\" routerLink='/login'>로그인</a>\n        </li>\n        <li *ngIf=\"!checkLoggedIn()\" class=\"nav-item\" aria-current=\"page\">\n          <a class=\"nav-link\" routerLink='/register'>사용자등록</a>\n        </li>\n        <li *ngIf=\"checkLoggedIn()\" class=\"nav-item\" aria-current=\"page\">\n          <a class=\"nav-link\" (click)=\"onLogoutClick()\" href=\"#\">로그아웃</a>\n        </li>\n        <li *ngIf=\"checkLoggedIn()\" class=\"nav-item\" aria-current=\"page\">\n          <a class=\"nav-link\" (click)=\"onDeleteCertClick()\"\n            href=\"#\">인증서삭제</a>\n        </li>\n      </ul>\n\n    </div>\n  </div>\n</nav>\n\n\n<!--\n<nav class=\"navbar navbar-expand-lg navbar-dark bg-primary\">\n  <a class=\"navbar-brand\" routerLink='/'>DualTokenAuth</a>\n  <button class=\"navbar-toggler\" type=\"button\" data-toggle=\"collapse\" data-target=\"#navbarSupportedContent\"\n    aria-controls=\"navbarSupportedContent\" aria-expanded=\"false\" aria-label=\"Toggle navigation\">\n    <span class=\"navbar-toggler-icon\"></span>\n  </button>\n\n  <div class=\"collapse navbar-collapse\" id=\"navbarSupportedContent\">\n    <ul class=\"navbar-nav mr-auto\">\n      <li class=\"nav-item\"><a class=\"nav-link\" routerLink='/'>Home</a></li>\n      <li class=\"nav-item\"><a class=\"nav-link\" routerLink='/about'>Intro</a></li>\n      <li *ngIf=\"checkLoggedIn()\" class=\"nav-item\"><a class=\"nav-link\" routerLink='/dashboard'> Dashboard </a></li>\n      <li *ngIf=\"checkLoggedIn()\" class=\"nav-item\"><a class=\"nav-link\" routerLink='/list'>List</a></li>\n      <li *ngIf=\"checkLoggedIn()\" class=\"nav-item\"><a class=\"nav-link\" routerLink='/blog'> JWT </a></li>\n      <li *ngIf=\"checkLoggedIn()\" class=\"nav-item\"><a class=\"nav-link\" routerLink='/profile'>DTA </a></li>\n      <li *ngIf=\"checkLoggedIn()\" class=\"nav-item\"><a class=\"nav-link\" routerLink='/encrypt'> Encrypt </a></li>\n      <li *ngIf=\"checkLoggedIn()\" class=\"nav-item\"><a class=\"nav-link\" routerLink='/mac'> Mac </a></li>\n      <li *ngIf=\"checkLoggedIn()\" class=\"nav-item\"><a class=\"nav-link\" routerLink='/cert'> Certificate </a></li>\n    </ul>\n    <ul class=\"navbar-nav ml-auto\">\n      <li *ngIf=\"!checkLoggedIn()\" class=\"nav-item\"><a class=\"nav-link\" routerLink='/login'>Login</a></li>\n      <li *ngIf=\"!checkLoggedIn()\" class=\"nav-item\"><a class=\"nav-link\" routerLink='/register'>Register</a></li>\n      <li *ngIf=\"checkLoggedIn()\" class=\"nav-item\"><a class=\"nav-link\" (click)=\"onLogoutClick()\" href=\"#\">Logout</a>\n      </li>\n      <li *ngIf=\"checkLoggedIn()\" class=\"nav-item\"><a class=\"nav-link\" (click)=\"onDeleteCertClick()\"\n          href=\"#\">DeleteCert</a>\n      </li>\n    </ul>\n  </div>\n</nav> -->\n","import { Component, OnInit } from '@angular/core';\nimport { AuthService } from '../../services/auth.service';\nimport { Router } from '@angular/router';\nimport { FlashMessagesService } from 'angular2-flash-messages';\n\n@Component({\n  selector: 'app-navbar',\n  templateUrl: './navbar.component.html',\n  styleUrls: ['./navbar.component.scss']\n})\nexport class NavbarComponent implements OnInit {\n\n  constructor(\n    private authService: AuthService,\n    private router: Router,\n    private flashMessage: FlashMessagesService\n  ) { }\n\n  ngOnInit() {\n  }\n\n  onLogoutClick() {\n    this.authService.logout();\n    this.flashMessage.show('You are now logged out. Login again?', {\n      cssClass: 'alert-success',\n      timeout: 3000\n    });\n    this.router.navigate(['/login']);\n    return false;\n  }\n\n  checkLoggedIn() {\n    return this.authService.loggedIn();\n  }\n\n  onDeleteCertClick() {\n    localStorage.clear();   // Clear localStorage\n    this.authService.logout();\n    this.flashMessage.show('Certificate deleted. You are now logged out. ', {\n      cssClass: 'alert-success',\n      timeout: 3000\n    });\n    this.router.navigate(['/login']);\n    return false;\n  }\n}\n","<div *ngIf=\"name\">\n  <h2 class=\"page-header\"> JWT 인증 </h2>\n  <div class=\"alert\" role=\"alert\">\n    <p>\n      이 페이지는 현재 표준 토큰인증기술로 사용되는 JWT 인증을 보여주는 페이지입니다. 이 페이지를 접속하기 위해서 브라우저는 고정된 JWT(공개토큰은 표준 JWT임)를 서버에게 전송하며 서버는 토큰의 유효성을 검증하고 유효한 경우 서비스를 제공합니다. 그러나 이 방법은 공격자가 JWT를 도청하게 되면 클라이언트 신분을 위장할 수 있으므로 반드시 https 암호화 통신을 사용하여 전달해야 합니다.\n    </p>\n  </div>\n\n  <br>\n  <div class=\"alert alert-success\" role=\"alert\">\n    <h2 class=\"page-header\"> 이 페이지를 접속하기 위하여 클라이언트가 서버에게 전송하는 정보 </h2>\n    <p>공개토큰 (Public Token) :\n      <textarea class=\"form-control\" rows=\"5\"> {{ptoken}}</textarea>\n    </p>\n\n    <p>\n      매 접속시마다 동일한 고정된 JWT(공개토큰)가 서버에게 전송됩니다.\n    </p>\n  </div>\n\n  <br>\n  <h2 class=\"page-header\"> 서버가 응답하여 전송한 정보 </h2>\n  <p>\n    서버는 토큰이 유효한 경우에만 사용자 정보를 응답합니다. 토큰이 없으면 이 페이지에 접속할 수 없습니다.\n  </p>\n  <ul class=\"list-group\">\n    <li class=\"list-group-item\">Name: {{name}}</li>\n    <li class=\"list-group-item\">Username: {{username}}</li>\n    <li class=\"list-group-item\">Email: {{email}}</li>\n    <li class=\"list-group-item\">Age: {{age}}</li>\n  </ul>\n</div>\n","import { Component, OnInit } from '@angular/core';\nimport { AuthService } from 'src/app/services/auth.service';\nimport { Router } from '@angular/router';\n\n@Component({\n  selector: 'app-blog',\n  templateUrl: './blog.component.html',\n  styleUrls: ['./blog.component.scss']\n})\nexport class BlogComponent implements OnInit {\n\n  name: string;\n  username: string;\n  email: string;\n  age: number;\n  ptoken: any;\n\n  constructor(\n    private authService: AuthService,\n    private router: Router\n  ) { }\n\n  ngOnInit() {\n    this.ptoken = localStorage.getItem('ptoken');\n\n    this.authService.getBlog().subscribe(blog => {\n      this.name = blog.user.name;\n      this.username = blog.user.username;\n      this.email = blog.user.email;\n      this.age = blog.user.age;\n    }, err => {\n      console.log(err);\n      return false;\n    });\n\n  }\n\n}\n","import { Injectable } from '@angular/core';\nimport { HttpClient, HttpHeaders } from '@angular/common/http';\nimport { Observable } from 'rxjs';\nimport { User, Login, UserNoPW } from '../models/User';\nimport { JwtHelperService } from '@auth0/angular-jwt';\n\nimport * as forge from 'node-forge';\nconst pki = forge.pki;\n\n// Basic header option\nconst httpOptions = {\n  headers: new HttpHeaders({\n    'Content-Type': 'application/json'\n  })\n};\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class AuthService {\n  ptoken: any;          // Public token\n  stoken: any;          // Secret token\n  userNoPW: UserNoPW;   // Logged in user information without password\n\n  constructor(\n    private http: HttpClient,\n    public jwtHelper: JwtHelperService\n  ) { }\n\n  // 0. API Connection\n  prepEndpoint(ep) {\n    // 1. localhost service\n    // return 'http://localhost:3000/' + ep;\n\n    // 2. Heroku cloud porting\n    return ep;\n  }\n\n  // 1. Connecting Home, distribute server certificate\n  connectHome(): Observable<any> {\n    const homeUrl = this.prepEndpoint('users/home');\n    return this.http.get(homeUrl, httpOptions);\n  }\n\n  // 2. Register new user\n  registerUser(register): Observable<any> {\n    const registerUrl = this.prepEndpoint('users/register');\n    return this.http.post<User>(registerUrl, register, httpOptions);\n  }\n\n  // 3. ID/Pass login\n  authenticateUser(login): Observable<any> {\n    const loginUrl = this.prepEndpoint('users/authenticate');\n    return this.http.post(loginUrl, login, httpOptions);\n  }\n\n  // 4. One-click easy login\n  authenticateSigUser(): Observable<any> {\n    const privateKeyPem = localStorage.getItem('privateKey');\n    const privateKey = pki.privateKeyFromPem(privateKeyPem);\n    const certPem = localStorage.getItem('cert');\n    const currentTime = new Date().getTime();\n    const cert = pki.certificateFromPem(certPem);\n    const username = cert.subject.getField('CN').value;\n\n    // Signature generation on username, currentTime\n    let md = forge.md.sha1.create();\n    md.update(username, 'utf8');\n    md.update(currentTime, 'utf8');\n    const signature = privateKey.sign(md);\n    const signatureHex = forge.util.bytesToHex(signature);\n\n    // Easy login request\n    const request = {\n      username: username,\n      currentTime: currentTime,\n      signatureHex: signatureHex,\n      certPem: certPem\n    };\n\n    const loginUrl = this.prepEndpoint('users/authenticateSig');\n    return this.http.post(loginUrl, request, httpOptions);\n  }\n\n  // 5. Profile page using dual-token authentication (DTA)\n  getProfile(ptoken, ctime, auth): Observable<any> {\n    // Http header option for DTA\n    const httpOptions1 = {\n      headers: new HttpHeaders({\n        'Content-Type': 'application/json',\n        'Authorization': ptoken,\n        'Ctime': ctime,\n        'Auth': auth\n      })\n    };\n\n    const profileUrl = this.prepEndpoint('users/profile');\n    return this.http.get(profileUrl, httpOptions1);\n  }\n\n  // 6. Blog page using standard JWT authentication\n  getBlog(): Observable<any> {\n    // http header option for JWT\n    const httpOptions2 = {\n      headers: new HttpHeaders({\n        'Content-Type': 'application/json',\n        'Authorization': this.ptoken\n      })\n    };\n\n    const blogUrl = this.prepEndpoint('users/blog');\n    return this.http.get(blogUrl, httpOptions2);\n  }\n\n  // 7. Show user list\n  getList(): Observable<any> {\n    const listUrl = this.prepEndpoint('users/list');\n    return this.http.get(listUrl, httpOptions);\n  }\n\n  // 8. Message encryption using one-time secret key\n  encryptedMessage(encrypted, ctime, ptoken): Observable<any> {\n    // http header option for message encryption\n    const httpOptions3 = {\n      headers: new HttpHeaders({\n        'Content-Type': 'application/json',\n        'Authorization': ptoken,\n        'Ctime': ctime,\n        'Enc': encrypted\n      })\n    };\n\n    const encryptUrl = this.prepEndpoint('users/encrypt');\n    return this.http.get(encryptUrl, httpOptions3);\n  }\n\n  getEncrypt(plaintext, key) {\n    let plaintextUtf8 = forge.util.encodeUtf8(plaintext);\n    let key1 = forge.util.hexToBytes(key);\n    let cipher = forge.cipher.createCipher('AES-ECB', key1);\n    cipher.start();\n    cipher.update(forge.util.createBuffer(plaintextUtf8, 'binary'));\n    cipher.finish();\n    let ciphertext = cipher.output;\n    return forge.util.bytesToHex(ciphertext);\n  }\n\n  // 9. Message authentication using one-time secret key\n  macMessage(plaintext, ctime, ptoken, mac): Observable<any> {\n    // http header option for message authentication\n    const httpOptions4 = {\n      headers: new HttpHeaders({\n        'Content-Type': 'application/json',\n        'Authorization': ptoken,\n        'Ctime': ctime,\n        'Mac': mac,\n        'Plaintext': plaintext\n      })\n    };\n\n    const macUrl = this.prepEndpoint('users/mac');\n    return this.http.get(macUrl, httpOptions4);\n  }\n\n  getMac(plaintext, key) {\n    let md = forge.md.sha256.create();\n    md.update(plaintext + key);\n    return md.digest().toHex();\n  }\n\n  // 10. Issuing certificate\n  certRequest(request): Observable<any> {\n    // Key generation\n    let keyPair = pki.rsa.generateKeyPair(1024);\n    let publicKey = keyPair.publicKey;\n    let privateKey = keyPair.privateKey;\n    let publicKeyPem = pki.publicKeyToPem(publicKey);\n    let privateKeyPem = pki.privateKeyToPem(privateKey);\n\n    // Storing private key\n    localStorage.setItem('privateKey', privateKeyPem);\n\n    // Certificate request. UTF-8 encoding.\n    const req = {\n      country: forge.util.encodeUtf8(request.country),\n      state: forge.util.encodeUtf8(request.state),\n      locality: forge.util.encodeUtf8(request.locality),\n      organization: forge.util.encodeUtf8(request.organization),\n      orgUnit: forge.util.encodeUtf8(request.orgUnit),\n      common: request.common, // common = username should be English\n      publicKey: publicKeyPem\n    }\n\n    const certUrl = this.prepEndpoint('users/cert');\n    return this.http.post(certUrl, req, httpOptions);\n  }\n\n  // Other utility functions\n  // 1. Store user data in LocalStorage\n  storeUserData(ptoken, stoken, userNoPW) {\n    localStorage.setItem('ptoken', ptoken);\n    localStorage.setItem('stoken', stoken);\n    localStorage.setItem('userNoPW', JSON.stringify(userNoPW));\n    this.ptoken = ptoken;\n    this.stoken = stoken;\n    this.userNoPW = userNoPW;\n  }\n\n  // 2. Delete user info in logout\n  logout() {\n    this.ptoken = null;\n    this.stoken = null;\n    this.userNoPW = null;\n    localStorage.removeItem('ptoken');\n    localStorage.removeItem('stoken');\n    localStorage.removeItem('userNoPW');\n  }\n\n  // 3. Check loggedIn state using JWT\n  loggedIn() {\n    return !this.jwtHelper.isTokenExpired(this.ptoken);\n  }\n\n  // 4. Generate one-time key\n  getKey(ctime, stoken) {\n    let md = forge.md.sha256.create();\n    md.update(ctime + stoken);\n    const key = md.digest().toHex();\n    return key;\n  }\n\n  // 5. Generate one-time auth\n  computeAuth(ctime, stoken) {\n    let md = forge.md.sha256.create();\n    md.update(ctime + stoken);\n    return md.digest().toHex();\n  }\n\n  // 6. Store certificate\n  storeCert(cert, caCert) {\n    localStorage.setItem('cert', cert);\n    localStorage.setItem('caCert', caCert);\n  }\n}\n\n\n","import { Component, OnInit } from '@angular/core';\nimport { AuthService } from 'src/app/services/auth.service';\nimport { Router } from '@angular/router';\nimport { FlashMessagesService } from 'angular2-flash-messages';\n\n@Component({\n  selector: 'app-cert',\n  templateUrl: './cert.component.html',\n  styleUrls: ['./cert.component.scss']\n})\nexport class CertComponent implements OnInit {\n  country: string;\n  state: string;\n  locality: string;\n  organization: string;\n  orgUnit: string;\n  common: string;\n\n  constructor(\n    private authService: AuthService,\n    private router: Router,\n    private flashMessage: FlashMessagesService\n  ) { }\n\n  ngOnInit() {\n    this.common = JSON.parse(localStorage.getItem('userNoPW')).username;\n  }\n\n  onCertRequest() {\n    const request = {\n      country: this.country,\n      state: this.state,\n      locality: this.locality,\n      organization: this.organization,\n      orgUnit: this.orgUnit,\n      common: this.common\n    }\n\n    this.authService.certRequest(request).subscribe(data => {\n      if (data.success) {\n        this.authService.storeCert(data.cert, data.caCert);\n        this.flashMessage.show('Your certificate was issued.', {\n          cssClass: 'alert-success',\n          timeout: 3000\n        });\n        this.router.navigate(['dashboard']);\n      } else {\n        this.flashMessage.show('Certificate issuing fails', {\n          cssClass: 'alert-danger',\n          timeout: 3000\n        });\n        this.router.navigate(['cert']);\n      }\n    });\n  }\n}\n","<h2 class=\"page-header\"> 인증서 발급 (Certificate Request)</h2>\n<form (ngSubmit)=\"onCertRequest()\">\n  <div class=\"mb-3\">\n    <label class=\"form-label\"> 이름(Common Name) - 현 사용자의 ID를 자동으로 이용하며 사용자가 바꿀 수 없습니다. </label>\n    <input type=\"text\" [(ngModel)]=\"common\" name=\"common\" class=\"form-control\" disabled>\n  </div>\n  <div class=\"mb-3\">\n    <label class=\"form-label\"> 부서(Organizational Unit Name) </label>\n    <input type=\"text\" [(ngModel)]=\"orgUnit\" name=\"orgUnit\" class=\"form-control\">\n  </div>\n  <div class=\"mb-3\">\n    <label class=\"form-label\"> 기관(Organization Name) </label>\n    <input type=\"text\" [(ngModel)]=\"organization\" name=\"organization\" class=\"form-control\">\n  </div>\n  <div class=\"mb-3\">\n    <label class=\"form-label\"> 도시(Locality Name) </label>\n    <input type=\"text\" [(ngModel)]=\"locality\" name=\"locality\" class=\"form-control\">\n  </div>\n  <div class=\"mb-3\">\n    <label class=\"form-label\"> 시도명(State or Province Name) </label>\n    <input type=\"text\" [(ngModel)]=\"state\" name=\"state\" class=\"form-control\">\n  </div>\n  <div class=\"mb-3\">\n    <label class=\"form-label\"> 국가(Country) - KR for Korea </label>\n    <input type=\"text\" [(ngModel)]=\"country\" name=\"country\" class=\"form-control\">\n  </div>\n  <input type=\"submit\" class=\"btn btn-primary\" value=\"인증서 발급 요청하기\">\n</form>\n","import { NgModule } from '@angular/core';\nimport { Routes, RouterModule } from '@angular/router';\n\nimport { NavbarComponent } from './components/navbar/navbar.component';\nimport { LoginComponent } from './components/login/login.component';\nimport { RegisterComponent } from './components/register/register.component';\nimport { HomeComponent } from './components/home/home.component';\nimport { DashboardComponent } from './components/dashboard/dashboard.component';\nimport { ProfileComponent } from './components/profile/profile.component';\nimport { ListComponent } from './components/list/list.component';\n\nimport { AuthGuard } from './guards/auth.guard';\nimport { EncryptComponent } from './components/encrypt/encrypt.component';\nimport { MacComponent } from './components/mac/mac.component';\nimport { BlogComponent } from './components/blog/blog.component';\nimport { AboutComponent } from './components/about/about.component';\nimport { CertComponent } from './components/cert/cert.component';\n\nconst routes: Routes = [\n  { path: '', component: HomeComponent },\n  { path: 'navbar', component: NavbarComponent },\n  { path: 'login', component: LoginComponent },\n  { path: 'register', component: RegisterComponent },\n  { path: 'about', component: AboutComponent },\n  { path: 'dashboard', component: DashboardComponent, canActivate: [AuthGuard] },\n  { path: 'profile', component: ProfileComponent, canActivate: [AuthGuard] },\n  { path: 'list', component: ListComponent, canActivate: [AuthGuard] },\n  { path: 'encrypt', component: EncryptComponent, canActivate: [AuthGuard] },\n  { path: 'mac', component: MacComponent, canActivate: [AuthGuard] },\n  { path: 'blog', component: BlogComponent, canActivate: [AuthGuard] },\n  { path: 'cert', component: CertComponent, canActivate: [AuthGuard] }\n];\n\n@NgModule({\n  imports: [RouterModule.forRoot(routes)],\n  exports: [RouterModule]\n})\nexport class AppRoutingModule { }\n","import { enableProdMode } from '@angular/core';\nimport { platformBrowserDynamic } from '@angular/platform-browser-dynamic';\n\nimport { AppModule } from './app/app.module';\nimport { environment } from './environments/environment';\n\nif (environment.production) {\n  enableProdMode();\n}\n\nplatformBrowserDynamic().bootstrapModule(AppModule)\n  .catch(err => console.error(err));\n","function webpackEmptyAsyncContext(req) {\n\t// Here Promise.resolve().then() is used instead of new Promise() to prevent\n\t// uncaught exception popping up in devtools\n\treturn Promise.resolve().then(function() {\n\t\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\t\te.code = 'MODULE_NOT_FOUND';\n\t\tthrow e;\n\t});\n}\nwebpackEmptyAsyncContext.keys = function() { return []; };\nwebpackEmptyAsyncContext.resolve = webpackEmptyAsyncContext;\nmodule.exports = webpackEmptyAsyncContext;\nwebpackEmptyAsyncContext.id = \"zn8P\";"],"sourceRoot":"webpack:///"}